
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Oct 04 20:14:32 ART 2015
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Oct 04 20:14:32 ART 2015
  */
public class CTdsParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CTdsParser() {super();}

  /** Constructor which sets the default scanner. */
  public CTdsParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CTdsParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\004\010\000\002\004\007\000\002\006\004" +
    "\000\002\006\002\000\002\005\005\000\002\016\003\000" +
    "\002\016\005\000\002\015\003\000\002\015\006\000\002" +
    "\010\004\000\002\010\003\000\002\007\007\000\002\007" +
    "\010\000\002\007\007\000\002\007\010\000\002\013\004" +
    "\000\002\013\006\000\002\011\003\000\002\011\004\000" +
    "\002\014\006\000\002\014\005\000\002\020\004\000\002" +
    "\020\003\000\002\017\006\000\002\017\006\000\002\017" +
    "\006\000\002\017\004\000\002\017\007\000\002\017\011" +
    "\000\002\017\011\000\002\017\005\000\002\017\005\000" +
    "\002\017\004\000\002\017\004\000\002\017\004\000\002" +
    "\017\003\000\002\017\003\000\002\021\003\000\002\021" +
    "\004\000\002\021\006\000\002\021\007\000\002\022\005" +
    "\000\002\022\004\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\004\000\002\023\004\000\002" +
    "\023\005\000\002\012\005\000\002\012\006\000\002\012" +
    "\006\000\002\012\007\000\002\024\005\000\002\024\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\026\003\000\002\026\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\004\004\006\001\002\000\004\002\244\001" +
    "\002\000\006\002\001\004\006\001\002\000\004\061\007" +
    "\001\002\000\004\042\010\001\002\000\014\005\ufffb\006" +
    "\ufffb\007\ufffb\020\ufffb\043\ufffb\001\002\000\014\005\012" +
    "\006\021\007\013\020\014\043\015\001\002\000\004\061" +
    "\uffb5\001\002\000\004\061\uffb3\001\002\000\004\061\234" +
    "\001\002\000\006\002\ufffd\004\ufffd\001\002\000\004\043" +
    "\233\001\002\000\004\061\232\001\002\000\014\005\012" +
    "\006\021\007\013\020\014\043\ufff4\001\002\000\004\061" +
    "\uffb4\001\002\000\036\005\ufffc\006\ufffc\007\ufffc\010\ufffc" +
    "\012\ufffc\013\ufffc\014\ufffc\015\ufffc\017\ufffc\020\ufffc\042" +
    "\ufffc\043\ufffc\053\ufffc\061\ufffc\001\002\000\004\043\ufff5" +
    "\001\002\000\004\061\025\001\002\000\004\046\026\001" +
    "\002\000\012\005\012\006\021\007\013\047\027\001\002" +
    "\000\006\016\034\042\036\001\002\000\004\061\226\001" +
    "\002\000\004\047\032\001\002\000\006\016\034\042\036" +
    "\001\002\000\014\005\ufff2\006\ufff2\007\ufff2\020\ufff2\043" +
    "\ufff2\001\002\000\004\053\225\001\002\000\014\005\uffed" +
    "\006\uffed\007\uffed\020\uffed\043\uffed\001\002\000\034\005" +
    "\ufffb\006\ufffb\007\ufffb\010\ufffb\012\ufffb\013\ufffb\014\ufffb" +
    "\015\ufffb\017\ufffb\042\ufffb\043\ufffb\053\ufffb\061\ufffb\001" +
    "\002\000\034\005\012\006\021\007\013\010\050\012\056" +
    "\013\045\014\055\015\042\017\046\042\036\043\053\053" +
    "\047\061\052\001\002\000\004\053\224\001\002\000\010" +
    "\030\213\031\214\032\215\001\002\000\004\053\212\001" +
    "\002\000\026\010\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8" +
    "\017\uffe8\042\uffe8\043\uffe8\053\uffe8\061\uffe8\001\002\000" +
    "\004\061\201\001\002\000\022\022\061\036\074\046\070" +
    "\055\064\056\066\057\063\060\065\061\052\001\002\000" +
    "\024\022\061\036\074\046\070\053\174\055\064\056\066" +
    "\057\063\060\065\061\052\001\002\000\026\010\uffdb\012" +
    "\uffdb\013\uffdb\014\uffdb\015\uffdb\017\uffdb\042\uffdb\043\uffdb" +
    "\053\uffdb\061\uffdb\001\002\000\004\046\166\001\002\000" +
    "\026\010\uffda\012\uffda\013\uffda\014\uffda\015\uffda\017\uffda" +
    "\042\uffda\043\uffda\053\uffda\061\uffda\001\002\000\062\021" +
    "\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9" +
    "\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\037" +
    "\uffd9\040\uffd9\041\uffd9\042\uffd9\044\141\045\uffd9\046\142" +
    "\047\uffd9\051\144\052\uffd9\053\uffd9\001\002\000\040\005" +
    "\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea" +
    "\014\uffea\015\uffea\017\uffea\020\uffea\042\uffea\043\uffea\053" +
    "\uffea\061\uffea\001\002\000\026\010\050\012\056\013\045" +
    "\014\055\015\042\017\046\042\036\043\137\053\047\061" +
    "\052\001\002\000\004\053\136\001\002\000\004\061\057" +
    "\001\002\000\004\030\060\001\002\000\022\022\061\036" +
    "\074\046\070\055\064\056\066\057\063\060\065\061\052" +
    "\001\002\000\022\022\061\036\074\046\070\055\064\056" +
    "\066\057\063\060\065\061\052\001\002\000\046\021\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\033" +
    "\uffd2\034\uffd2\035\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2" +
    "\045\uffd2\047\uffd2\052\uffd2\053\uffd2\001\002\000\046\021" +
    "\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7" +
    "\033\uffb7\034\uffb7\035\uffb7\037\uffb7\040\uffb7\041\uffb7\042" +
    "\uffb7\045\uffb7\047\uffb7\052\uffb7\053\uffb7\001\002\000\046" +
    "\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027" +
    "\uffba\033\uffba\034\uffba\035\uffba\037\uffba\040\uffba\041\uffba" +
    "\042\uffba\045\uffba\047\uffba\052\uffba\053\uffba\001\002\000" +
    "\046\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6" +
    "\027\uffb6\033\uffb6\034\uffb6\035\uffb6\037\uffb6\040\uffb6\041" +
    "\uffb6\042\uffb6\045\uffb6\047\uffb6\052\uffb6\053\uffb6\001\002" +
    "\000\046\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026" +
    "\uffb9\027\uffb9\033\uffb9\034\uffb9\035\uffb9\037\uffb9\040\uffb9" +
    "\041\uffb9\042\uffb9\045\uffb9\047\uffb9\052\uffb9\053\uffb9\001" +
    "\002\000\046\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8" +
    "\026\uffb8\027\uffb8\033\uffb8\034\uffb8\035\uffb8\037\uffb8\040" +
    "\uffb8\041\uffb8\042\uffb8\045\uffb8\047\uffb8\052\uffb8\053\uffb8" +
    "\001\002\000\022\022\061\036\074\046\070\055\064\056" +
    "\066\057\063\060\065\061\052\001\002\000\046\021\uffd3" +
    "\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\033" +
    "\uffd3\034\uffd3\035\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3" +
    "\045\uffd3\047\uffd3\052\uffd3\053\uffd3\001\002\000\036\021" +
    "\104\022\077\023\110\024\101\025\102\026\107\027\106" +
    "\033\105\034\076\035\112\037\103\040\100\041\111\052" +
    "\130\001\002\000\046\021\uffd1\022\uffd1\023\uffd1\024\uffd1" +
    "\025\uffd1\026\uffd1\027\uffd1\033\uffd1\034\uffd1\035\uffd1\037" +
    "\uffd1\040\uffd1\041\uffd1\042\uffd1\045\uffd1\047\uffd1\052\uffd1" +
    "\053\uffd1\001\002\000\022\022\061\036\074\046\070\055" +
    "\064\056\066\057\063\060\065\061\052\001\002\000\046" +
    "\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027" +
    "\uffc2\033\uffc2\034\uffc2\035\uffc2\037\uffc2\040\uffc2\041\uffc2" +
    "\042\uffc2\045\uffc2\047\uffc2\052\uffc2\053\uffc2\001\002\000" +
    "\022\022\061\036\074\046\070\055\064\056\066\057\063" +
    "\060\065\061\052\001\002\000\022\022\061\036\074\046" +
    "\070\055\064\056\066\057\063\060\065\061\052\001\002" +
    "\000\022\022\061\036\074\046\070\055\064\056\066\057" +
    "\063\060\065\061\052\001\002\000\022\022\061\036\074" +
    "\046\070\055\064\056\066\057\063\060\065\061\052\001" +
    "\002\000\022\022\061\036\074\046\070\055\064\056\066" +
    "\057\063\060\065\061\052\001\002\000\022\022\061\036" +
    "\074\046\070\055\064\056\066\057\063\060\065\061\052" +
    "\001\002\000\022\022\061\036\074\046\070\055\064\056" +
    "\066\057\063\060\065\061\052\001\002\000\022\022\061" +
    "\036\074\046\070\055\064\056\066\057\063\060\065\061" +
    "\052\001\002\000\022\022\061\036\074\046\070\055\064" +
    "\056\066\057\063\060\065\061\052\001\002\000\022\022" +
    "\061\036\074\046\070\055\064\056\066\057\063\060\065" +
    "\061\052\001\002\000\022\022\061\036\074\046\070\055" +
    "\064\056\066\057\063\060\065\061\052\001\002\000\022" +
    "\022\061\036\074\046\070\055\064\056\066\057\063\060" +
    "\065\061\052\001\002\000\022\022\061\036\074\046\070" +
    "\055\064\056\066\057\063\060\065\061\052\001\002\000" +
    "\046\021\104\022\077\023\110\024\101\025\102\026\uffc7" +
    "\027\uffc7\033\uffc7\034\uffc7\035\uffc7\037\uffc7\040\100\041" +
    "\111\042\uffc7\045\uffc7\047\uffc7\052\uffc7\053\uffc7\001\002" +
    "\000\046\021\104\022\077\023\110\024\101\025\102\026" +
    "\uffc4\027\uffc4\033\uffc4\034\uffc4\035\uffc4\037\uffc4\040\uffc4" +
    "\041\uffc4\042\uffc4\045\uffc4\047\uffc4\052\uffc4\053\uffc4\001" +
    "\002\000\046\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce" +
    "\026\uffce\027\uffce\033\uffce\034\uffce\035\uffce\037\uffce\040" +
    "\uffce\041\uffce\042\uffce\045\uffce\047\uffce\052\uffce\053\uffce" +
    "\001\002\000\046\021\104\022\077\023\110\024\101\025" +
    "\102\026\uffcb\027\uffcb\033\uffcb\034\uffcb\035\uffcb\037\uffcb" +
    "\040\100\041\111\042\uffcb\045\uffcb\047\uffcb\052\uffcb\053" +
    "\uffcb\001\002\000\046\021\104\022\077\023\110\024\101" +
    "\025\102\026\uffc9\027\uffc9\033\uffc9\034\uffc9\035\uffc9\037" +
    "\uffc9\040\100\041\111\042\uffc9\045\uffc9\047\uffc9\052\uffc9" +
    "\053\uffc9\001\002\000\046\021\104\022\077\023\110\024" +
    "\101\025\102\026\uffca\027\uffca\033\uffca\034\uffca\035\uffca" +
    "\037\uffca\040\100\041\111\042\uffca\045\uffca\047\uffca\052" +
    "\uffca\053\uffca\001\002\000\046\021\uffd0\022\uffd0\023\110" +
    "\024\101\025\102\026\uffd0\027\uffd0\033\uffd0\034\uffd0\035" +
    "\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\045\uffd0\047\uffd0" +
    "\052\uffd0\053\uffd0\001\002\000\046\021\104\022\077\023" +
    "\110\024\101\025\102\026\uffc6\027\uffc6\033\uffc6\034\uffc6" +
    "\035\uffc6\037\uffc6\040\100\041\111\042\uffc6\045\uffc6\047" +
    "\uffc6\052\uffc6\053\uffc6\001\002\000\046\021\uffcc\022\uffcc" +
    "\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\033\uffcc\034" +
    "\uffcc\035\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\045\uffcc" +
    "\047\uffcc\052\uffcc\053\uffcc\001\002\000\046\021\uffcd\022" +
    "\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\033\uffcd" +
    "\034\uffcd\035\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\045" +
    "\uffcd\047\uffcd\052\uffcd\053\uffcd\001\002\000\046\021\104" +
    "\022\077\023\110\024\101\025\102\026\uffc5\027\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5" +
    "\045\uffc5\047\uffc5\052\uffc5\053\uffc5\001\002\000\046\021" +
    "\uffcf\022\uffcf\023\110\024\101\025\102\026\uffcf\027\uffcf" +
    "\033\uffcf\034\uffcf\035\uffcf\037\uffcf\040\uffcf\041\uffcf\042" +
    "\uffcf\045\uffcf\047\uffcf\052\uffcf\053\uffcf\001\002\000\046" +
    "\021\104\022\077\023\110\024\101\025\102\026\uffc8\027" +
    "\uffc8\033\uffc8\034\uffc8\035\uffc8\037\uffc8\040\100\041\111" +
    "\042\uffc8\045\uffc8\047\uffc8\052\uffc8\053\uffc8\001\002\000" +
    "\022\022\061\036\074\046\070\055\064\056\066\057\063" +
    "\060\065\061\052\001\002\000\036\021\104\022\077\023" +
    "\110\024\101\025\102\026\107\027\106\033\105\034\076" +
    "\035\112\037\103\040\100\041\111\042\036\001\002\000" +
    "\026\010\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\017\uffe1" +
    "\042\uffe1\043\uffe1\053\uffe1\061\uffe1\001\002\000\036\021" +
    "\104\022\077\023\110\024\101\025\102\026\107\027\106" +
    "\033\105\034\076\035\112\037\103\040\100\041\111\047" +
    "\134\001\002\000\046\021\uffc1\022\uffc1\023\uffc1\024\uffc1" +
    "\025\uffc1\026\uffc1\027\uffc1\033\uffc1\034\uffc1\035\uffc1\037" +
    "\uffc1\040\uffc1\041\uffc1\042\uffc1\045\uffc1\047\uffc1\052\uffc1" +
    "\053\uffc1\001\002\000\046\021\uffc3\022\uffc3\023\uffc3\024" +
    "\uffc3\025\uffc3\026\uffc3\027\uffc3\033\uffc3\034\uffc3\035\uffc3" +
    "\037\uffc3\040\uffc3\041\uffc3\042\uffc3\045\uffc3\047\uffc3\052" +
    "\uffc3\053\uffc3\001\002\000\026\010\uffdd\012\uffdd\013\uffdd" +
    "\014\uffdd\015\uffdd\017\uffdd\042\uffdd\043\uffdd\053\uffdd\061" +
    "\uffdd\001\002\000\040\005\uffeb\006\uffeb\007\uffeb\010\uffeb" +
    "\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\017\uffeb\020" +
    "\uffeb\042\uffeb\043\uffeb\053\uffeb\061\uffeb\001\002\000\026" +
    "\010\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\017\uffe9\042" +
    "\uffe9\043\uffe9\053\uffe9\061\uffe9\001\002\000\022\022\061" +
    "\036\074\046\070\055\064\056\066\057\063\060\065\061" +
    "\052\001\002\000\024\022\061\036\074\046\070\047\161" +
    "\055\064\056\066\057\063\060\065\061\052\001\002\000" +
    "\060\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8" +
    "\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035" +
    "\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\044\147\045\uffd8" +
    "\046\150\047\uffd8\052\uffd8\053\uffd8\001\002\000\004\061" +
    "\145\001\002\000\062\021\uffd4\022\uffd4\023\uffd4\024\uffd4" +
    "\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033" +
    "\uffd4\034\uffd4\035\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4" +
    "\044\uffd4\045\uffd4\046\uffd4\047\uffd4\051\144\052\uffd4\053" +
    "\uffd4\001\002\000\060\021\uffd5\022\uffd5\023\uffd5\024\uffd5" +
    "\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033" +
    "\uffd5\034\uffd5\035\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5" +
    "\044\uffd5\045\uffd5\046\uffd5\047\uffd5\052\uffd5\053\uffd5\001" +
    "\002\000\022\022\061\036\074\046\070\055\064\056\066" +
    "\057\063\060\065\061\052\001\002\000\024\022\061\036" +
    "\074\046\070\047\151\055\064\056\066\057\063\060\065" +
    "\061\052\001\002\000\046\021\uffbf\022\uffbf\023\uffbf\024" +
    "\uffbf\025\uffbf\026\uffbf\027\uffbf\033\uffbf\034\uffbf\035\uffbf" +
    "\037\uffbf\040\uffbf\041\uffbf\042\uffbf\045\uffbf\047\uffbf\052" +
    "\uffbf\053\uffbf\001\002\000\004\047\156\001\002\000\040" +
    "\021\104\022\077\023\110\024\101\025\102\026\107\027" +
    "\106\033\105\034\076\035\112\037\103\040\100\041\111" +
    "\047\uffbb\052\154\001\002\000\022\022\061\036\074\046" +
    "\070\055\064\056\066\057\063\060\065\061\052\001\002" +
    "\000\004\047\uffbc\001\002\000\046\021\uffbd\022\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\033\uffbd\034\uffbd" +
    "\035\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\045\uffbd\047" +
    "\uffbd\052\uffbd\053\uffbd\001\002\000\036\021\104\022\077" +
    "\023\110\024\101\025\102\026\107\027\106\033\105\034" +
    "\076\035\112\037\103\040\100\041\111\045\160\001\002" +
    "\000\054\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026" +
    "\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6" +
    "\035\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\045\uffd6\047" +
    "\uffd6\052\uffd6\053\uffd6\001\002\000\046\021\uffc0\022\uffc0" +
    "\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\033\uffc0\034" +
    "\uffc0\035\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\045\uffc0" +
    "\047\uffc0\052\uffc0\053\uffc0\001\002\000\004\047\163\001" +
    "\002\000\046\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe" +
    "\026\uffbe\027\uffbe\033\uffbe\034\uffbe\035\uffbe\037\uffbe\040" +
    "\uffbe\041\uffbe\042\uffbe\045\uffbe\047\uffbe\052\uffbe\053\uffbe" +
    "\001\002\000\036\021\104\022\077\023\110\024\101\025" +
    "\102\026\107\027\106\033\105\034\076\035\112\037\103" +
    "\040\100\041\111\045\165\001\002\000\054\021\uffd7\022" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\037\uffd7\040" +
    "\uffd7\041\uffd7\042\uffd7\045\uffd7\047\uffd7\052\uffd7\053\uffd7" +
    "\001\002\000\022\022\061\036\074\046\070\055\064\056" +
    "\066\057\063\060\065\061\052\001\002\000\036\021\104" +
    "\022\077\023\110\024\101\025\102\026\107\027\106\033" +
    "\105\034\076\035\112\037\103\040\100\041\111\047\170" +
    "\001\002\000\004\042\036\001\002\000\030\010\uffe3\011" +
    "\172\012\uffe3\013\uffe3\014\uffe3\015\uffe3\017\uffe3\042\uffe3" +
    "\043\uffe3\053\uffe3\061\uffe3\001\002\000\004\042\036\001" +
    "\002\000\026\010\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2" +
    "\017\uffe2\042\uffe2\043\uffe2\053\uffe2\061\uffe2\001\002\000" +
    "\026\010\uffde\012\uffde\013\uffde\014\uffde\015\uffde\017\uffde" +
    "\042\uffde\043\uffde\053\uffde\061\uffde\001\002\000\036\021" +
    "\104\022\077\023\110\024\101\025\102\026\107\027\106" +
    "\033\105\034\076\035\112\037\103\040\100\041\111\053" +
    "\176\001\002\000\026\010\uffdf\012\uffdf\013\uffdf\014\uffdf" +
    "\015\uffdf\017\uffdf\042\uffdf\043\uffdf\053\uffdf\061\uffdf\001" +
    "\002\000\036\021\104\022\077\023\110\024\101\025\102" +
    "\026\107\027\106\033\105\034\076\035\112\037\103\040" +
    "\100\041\111\042\036\001\002\000\026\010\uffe0\012\uffe0" +
    "\013\uffe0\014\uffe0\015\uffe0\017\uffe0\042\uffe0\043\uffe0\053" +
    "\uffe0\061\uffe0\001\002\000\010\044\207\052\ufff7\053\ufff7" +
    "\001\002\000\006\052\205\053\ufff9\001\002\000\004\053" +
    "\204\001\002\000\036\005\ufffa\006\ufffa\007\ufffa\010\ufffa" +
    "\012\ufffa\013\ufffa\014\ufffa\015\ufffa\017\ufffa\020\ufffa\042" +
    "\ufffa\043\ufffa\053\ufffa\061\ufffa\001\002\000\004\061\201" +
    "\001\002\000\004\053\ufff8\001\002\000\004\055\210\001" +
    "\002\000\004\045\211\001\002\000\006\052\ufff6\053\ufff6" +
    "\001\002\000\026\010\uffdc\012\uffdc\013\uffdc\014\uffdc\015" +
    "\uffdc\017\uffdc\042\uffdc\043\uffdc\053\uffdc\061\uffdc\001\002" +
    "\000\022\022\061\036\074\046\070\055\064\056\066\057" +
    "\063\060\065\061\052\001\002\000\022\022\061\036\074" +
    "\046\070\055\064\056\066\057\063\060\065\061\052\001" +
    "\002\000\022\022\061\036\074\046\070\055\064\056\066" +
    "\057\063\060\065\061\052\001\002\000\036\021\104\022" +
    "\077\023\110\024\101\025\102\026\107\027\106\033\105" +
    "\034\076\035\112\037\103\040\100\041\111\053\217\001" +
    "\002\000\026\010\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5" +
    "\017\uffe5\042\uffe5\043\uffe5\053\uffe5\061\uffe5\001\002\000" +
    "\036\021\104\022\077\023\110\024\101\025\102\026\107" +
    "\027\106\033\105\034\076\035\112\037\103\040\100\041" +
    "\111\053\221\001\002\000\026\010\uffe6\012\uffe6\013\uffe6" +
    "\014\uffe6\015\uffe6\017\uffe6\042\uffe6\043\uffe6\053\uffe6\061" +
    "\uffe6\001\002\000\036\021\104\022\077\023\110\024\101" +
    "\025\102\026\107\027\106\033\105\034\076\035\112\037" +
    "\103\040\100\041\111\053\223\001\002\000\026\010\uffe7" +
    "\012\uffe7\013\uffe7\014\uffe7\015\uffe7\017\uffe7\042\uffe7\043" +
    "\uffe7\053\uffe7\061\uffe7\001\002\000\026\010\uffe4\012\uffe4" +
    "\013\uffe4\014\uffe4\015\uffe4\017\uffe4\042\uffe4\043\uffe4\053" +
    "\uffe4\061\uffe4\001\002\000\014\005\uffec\006\uffec\007\uffec" +
    "\020\uffec\043\uffec\001\002\000\006\047\uffef\052\227\001" +
    "\002\000\010\005\012\006\021\007\013\001\002\000\004" +
    "\047\uffee\001\002\000\014\005\ufff3\006\ufff3\007\ufff3\020" +
    "\ufff3\043\ufff3\001\002\000\012\044\207\046\026\052\ufff7" +
    "\053\ufff7\001\002\000\006\002\ufffe\004\ufffe\001\002\000" +
    "\004\046\235\001\002\000\012\005\012\006\021\007\013" +
    "\047\236\001\002\000\006\016\034\042\036\001\002\000" +
    "\004\047\240\001\002\000\006\016\034\042\036\001\002" +
    "\000\014\005\ufff0\006\ufff0\007\ufff0\020\ufff0\043\ufff0\001" +
    "\002\000\014\005\ufff1\006\ufff1\007\ufff1\020\ufff1\043\ufff1" +
    "\001\002\000\004\002\uffff\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\006\002\003\004\004\001\001\000\002\001" +
    "\001\000\006\002\242\004\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\010\001\001\000\012\003" +
    "\016\005\021\007\017\010\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\201\016\202\001\001\000\010" +
    "\003\023\007\017\010\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\027\013\030\001\001\000\006\011" +
    "\230\014\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\032\014\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\036\001\001" +
    "\000\020\003\043\005\021\012\037\014\050\017\042\020" +
    "\053\021\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\201\016" +
    "\202\001\001\000\014\012\061\021\070\023\176\025\072" +
    "\026\066\001\001\000\014\012\061\021\070\023\174\025" +
    "\072\026\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\142\001\001\000\002\001" +
    "\001\000\012\012\037\014\050\017\137\021\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\012\061\021\070\023\071\025\072\026\066\001\001" +
    "\000\014\012\061\021\070\023\134\025\072\026\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\012\061\021\070\023\132\025\072\026\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\012\061\021\070\023\074\025\072\026\066\001\001" +
    "\000\002\001\001\000\014\012\061\021\070\023\126\025" +
    "\072\026\066\001\001\000\014\012\061\021\070\023\125" +
    "\025\072\026\066\001\001\000\014\012\061\021\070\023" +
    "\124\025\072\026\066\001\001\000\014\012\061\021\070" +
    "\023\123\025\072\026\066\001\001\000\014\012\061\021" +
    "\070\023\122\025\072\026\066\001\001\000\014\012\061" +
    "\021\070\023\121\025\072\026\066\001\001\000\014\012" +
    "\061\021\070\023\120\025\072\026\066\001\001\000\014" +
    "\012\061\021\070\023\117\025\072\026\066\001\001\000" +
    "\014\012\061\021\070\023\116\025\072\026\066\001\001" +
    "\000\014\012\061\021\070\023\115\025\072\026\066\001" +
    "\001\000\014\012\061\021\070\023\114\025\072\026\066" +
    "\001\001\000\014\012\061\021\070\023\113\025\072\026" +
    "\066\001\001\000\014\012\061\021\070\023\112\025\072" +
    "\026\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\012\061\021\070\023\130\025" +
    "\072\026\066\001\001\000\004\014\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\012\061\021\070\023\163\025\072\026\066\001" +
    "\001\000\016\012\061\021\070\023\152\024\161\025\072" +
    "\026\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\145\001\001\000\002\001\001\000\014\012\061" +
    "\021\070\023\156\025\072\026\066\001\001\000\016\012" +
    "\061\021\070\023\152\024\151\025\072\026\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\012\061\021\070\023\152\024\154\025\072\026\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\012\061\021\070\023\166\025\072\026\066\001\001" +
    "\000\002\001\001\000\004\014\170\001\001\000\002\001" +
    "\001\000\004\014\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\201\016\205\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\012\061\021\070\023\221\025\072\026\066\001\001" +
    "\000\014\012\061\021\070\023\217\025\072\026\066\001" +
    "\001\000\014\012\061\021\070\023\215\025\072\026\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\027\013\227\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\027\013\236\001\001\000\006\011\241" +
    "\014\034\001\001\000\002\001\001\000\006\011\240\014" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CTdsParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CTdsParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CTdsParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	/*
	 * Redefine the report_error method
	 */
    public void report_error(String message, Object info) {
       	StringBuffer m = new StringBuffer("Error");
		if(info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol)info);
			if(s.left >= 0) {
				m.append(" in line "+(s.left+1));
				if (s.right >= 0)
					m.append(", and column "+(s.right+1));
			}
			m.append(" near of value '"+ s.value +"'");
		}
		m.append(" : "+message);
		System.err.println(m);
    }

    /*
	 * Redefine the syntax_error method
	 */
    public void syntax_error(Symbol cur_token){
		System.err.println("Syntax error at "+cur_token.toString());
    }
 

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CTdsParser$actions {
  private final CTdsParser parser;

  /** Constructor */
  CUP$CTdsParser$actions(CTdsParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CTdsParser$do_action(
    int                        CUP$CTdsParser$act_num,
    java_cup.runtime.lr_parser CUP$CTdsParser$parser,
    java.util.Stack            CUP$CTdsParser$stack,
    int                        CUP$CTdsParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CTdsParser$result;

      /* select the action based on the action number */
      switch (CUP$CTdsParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		 RESULT = Type.BOOLEAN; 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("type",1, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // type ::= FLOAT 
            {
              Type RESULT =null;
		 RESULT = Type.FLOAT; 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("type",1, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT = Type.INT; 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("type",1, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // bool_literal ::= FALSE 
            {
              BooleanLiteral RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		BooleanLiteral f = (BooleanLiteral)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = f; 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("bool_literal",20, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // bool_literal ::= TRUE 
            {
              BooleanLiteral RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		BooleanLiteral t = (BooleanLiteral)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("bool_literal",20, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // literal ::= bool_literal 
            {
              Literal RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		BooleanLiteral b = (BooleanLiteral)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = b; 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // literal ::= FLOAT_LITERAL 
            {
              Literal RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		FloatLiteral f = (FloatLiteral)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = f; 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // literal ::= INT_LITERAL 
            {
              Literal RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		IntLiteral i = (IntLiteral)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = i; 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr_list ::= expr 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = new LinkedList<Expression>(Arrays.asList(e)); 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("expr_list",18, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr_list ::= expr COMMA expr_list 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 l.add(e) ; RESULT = (List<Expression>)l; 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("expr_list",18, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // method_call ::= ID extended_location L_PAREN expr_list R_PAREN 
            {
              MethodCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).right;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		List<Expression> el = (List<Expression>)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		 RESULT = new MethodCall(id,l,el,idleft+1,idright+1); 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("method_call",8, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-4)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // method_call ::= ID L_PAREN expr_list R_PAREN 
            {
              MethodCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		List<Expression> el = (List<Expression>)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		 RESULT = new MethodCall(id,new LinkedList<String>(),el,idleft+1,idright+1); 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("method_call",8, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // method_call ::= ID extended_location L_PAREN R_PAREN 
            {
              MethodCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).right;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).value;
		 RESULT = new MethodCall(id,l,idleft+1,idright+1); 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("method_call",8, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // method_call ::= ID L_PAREN R_PAREN 
            {
              MethodCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).value;
		 RESULT = new MethodCall(id,idleft+1,idright+1); 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("method_call",8, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= L_PAREN expr R_PAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		 RESULT = new NullaryExpr(e); 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= NOT expr 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = new UnaryOpExpr(UnaryOpType.NOT,e,oleft+1,oright+1);
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= MINUS expr 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = new UnaryOpExpr(UnaryOpType.MINUS,e,oleft+1,oright+1); 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= expr OR expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = new BinOpExpr(e1,BinOpType.OR,e2,oleft+1,oright+1); 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= expr AND expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = new BinOpExpr(e1,BinOpType.AND,e2,oleft+1,oright+1); 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= expr NOT_EQ expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = new BinOpExpr(e1,BinOpType.NEQ,e2,oleft+1,oright+1); 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= expr EQ_EQ expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = new BinOpExpr(e1,BinOpType.CEQ,e2,oleft+1,oright+1); 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= expr GTR_EQ expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = new BinOpExpr(e1,BinOpType.GEQ,e2,oleft+1,oright+1); 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= expr GTR expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = new BinOpExpr(e1,BinOpType.GE,e2,oleft+1,oright+1); 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= expr LESS_EQ expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = new BinOpExpr(e1,BinOpType.LEQ,e2,oleft+1,oright+1); 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= expr LESS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = new BinOpExpr(e1,BinOpType.LE,e2,oleft+1,oright+1); 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= expr MOD expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = new BinOpExpr(e1,BinOpType.MOD,e2,oleft+1,oright+1); 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= expr DIVIDE expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = new BinOpExpr(e1,BinOpType.DIVIDE,e2,oleft+1,oright+1); 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= expr TIMES expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = new BinOpExpr(e1,BinOpType.MULTIPLY,e2,oleft+1,oright+1); 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= expr MINUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = new BinOpExpr(e1,BinOpType.MINUS,e2,oleft+1,oright+1); 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= expr PLUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = new BinOpExpr(e1,BinOpType.PLUS,e2,oleft+1,oright+1); 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= literal 
            {
              Expression RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		Literal lit = (Literal)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = lit; 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= method_call 
            {
              Expression RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		MethodCall m = (MethodCall)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = m; 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= location 
            {
              Expression RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int locright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		Location loc = (Location)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = loc; 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // extended_location ::= DOT ID 
            {
              List<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = new LinkedList<String>(Arrays.asList(id)); 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("extended_location",16, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // extended_location ::= DOT ID extended_location 
            {
              List<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		List<String> el = (List<String>)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 el.add(0,id); RESULT = el; 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("extended_location",16, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // location ::= ID extended_location L_BRACKET expr R_BRACKET 
            {
              Location RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).right;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		 RESULT = new VarArrayLocation(id,e,l,idleft+1,idright+1); 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("location",15, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-4)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // location ::= ID L_BRACKET expr R_BRACKET 
            {
              Location RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		 RESULT = new VarArrayLocation(id,e,idleft+1,idright+1); 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("location",15, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // location ::= ID extended_location 
            {
              Location RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = new VarLocation(id,l,idleft+1,idright+1); 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("location",15, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // location ::= ID 
            {
              Location RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = new VarLocation(id,idleft+1,idright+1); 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("location",15, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= block 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = b; 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= SEMI_COLON 
            {
              Statement RESULT =null;

              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= CONTINUE SEMI_COLON 
            {
              Statement RESULT =null;
		 RESULT = new ContinueStatement();
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= BREAK SEMI_COLON 
            {
              Statement RESULT =null;
		 RESULT = new BreakStatement();
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= RETURN SEMI_COLON 
            {
              Statement RESULT =null;
		 RESULT = new ReturnStatement();
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= RETURN expr SEMI_COLON 
            {
              Statement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		 RESULT = new ReturnStatement(e,rleft+1,rright+1);
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= WHILE expr block 
            {
              Statement RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = new WhileStatement(cond,b,condleft+1,condright+1);
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= FOR ID EQ expr COMMA expr block 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-5)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = new ForStatement(id,cond,e,b,idleft+1,idright+1);
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-6)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= IF L_PAREN expr R_PAREN block ELSE block 
            {
              Statement RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-4)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-4)).value;
		int ibleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).left;
		int ibright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).right;
		Block ib = (Block)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).value;
		int ebleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int ebright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		Block eb = (Block)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = new IfStatement(cond,ib,eb,condleft+1,condright+1);
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-6)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= IF L_PAREN expr R_PAREN block 
            {
              Statement RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = new IfStatement(cond,b,condleft+1,condright+1); 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-4)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= method_call SEMI_COLON 
            {
              Statement RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		MethodCall m = (MethodCall)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		 RESULT = new MethodCallStatement(m); 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= location MINUS_EQ expr SEMI_COLON 
            {
              Statement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).right;
		Location l = (Location)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		 RESULT = new AssignStatement(l,AssignOpType.DECREMENT,e);
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= location PLUS_EQ expr SEMI_COLON 
            {
              Statement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).right;
		Location l = (Location)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		 RESULT = new AssignStatement(l,AssignOpType.INCREMENT,e);
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= location EQ expr SEMI_COLON 
            {
              Statement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).right;
		Location l = (Location)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		 RESULT = new AssignStatement(l,AssignOpType.ASSIGN,e);
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement_list ::= statement 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = new LinkedList<Statement>(Arrays.asList(s));
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("statement_list",14, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement_list ::= statement_list statement 
            {
              List<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 l.add(0,s); RESULT = l; 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("statement_list",14, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // block ::= L_BRACE field_decl_list R_BRACE 
            {
              Block RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		List<FieldDeclaration> fl = (List<FieldDeclaration>)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		 RESULT = new Block(fl,new LinkedList<Statement>()); 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("block",10, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // block ::= L_BRACE field_decl_list statement_list R_BRACE 
            {
              Block RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).right;
		List<FieldDeclaration> fl = (List<FieldDeclaration>)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		 RESULT = new Block(fl,sl); 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("block",10, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // method_body ::= EXTERN SEMI_COLON 
            {
              Block RESULT =null;
		 RESULT = null; 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("method_body",7, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // method_body ::= block 
            {
              Block RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = b; 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("method_body",7, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // arguments_list ::= type ID COMMA arguments_list 
            {
              List<Argument> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		List<Argument> l = (List<Argument>)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 l.add(0,new Argument(t,id)); RESULT = l; 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("arguments_list",9, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // arguments_list ::= type ID 
            {
              List<Argument> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = new LinkedList<Argument>(Arrays.asList(new Argument(t,id)));
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("arguments_list",9, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // method_decl ::= VOID ID L_PAREN arguments_list R_PAREN method_body 
            {
              MethodDeclaration RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).right;
		List<Argument> l = (List<Argument>)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = new MethodDeclaration(Type.VOID,id,l,b,idleft+1,idright+1); 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("method_decl",5, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-5)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // method_decl ::= VOID ID L_PAREN R_PAREN method_body 
            {
              MethodDeclaration RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = new MethodDeclaration(Type.VOID,id,new LinkedList<Argument>(),b,idleft+1,idright+1); 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("method_decl",5, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-4)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // method_decl ::= type ID L_PAREN arguments_list R_PAREN method_body 
            {
              MethodDeclaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).right;
		List<Argument> l = (List<Argument>)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = new MethodDeclaration(t,id,l,b,idleft+1,idright+1); 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("method_decl",5, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-5)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // method_decl ::= type ID L_PAREN R_PAREN method_body 
            {
              MethodDeclaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = new MethodDeclaration(t,id,new LinkedList<Argument>(),b,idleft+1,idright+1); 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("method_decl",5, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-4)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // method_decl_list ::= method_decl 
            {
              List<MethodDeclaration> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		MethodDeclaration m = (MethodDeclaration)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = new LinkedList<MethodDeclaration>(Arrays.asList(m));
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("method_decl_list",6, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // method_decl_list ::= method_decl method_decl_list 
            {
              List<MethodDeclaration> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		MethodDeclaration m = (MethodDeclaration)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		List<MethodDeclaration> l = (List<MethodDeclaration>)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 l.add(0,m); RESULT = l; 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("method_decl_list",6, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // decl ::= ID L_BRACKET INT_LITERAL R_BRACKET 
            {
              DeclarationIdentifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		IntLiteral n = (IntLiteral)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		 RESULT = new DeclarationIdentifier(id,n.getValue(),idleft+1,idright+1); 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("decl",11, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // decl ::= ID 
            {
              DeclarationIdentifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = new DeclarationIdentifier(id,idleft+1,idright+1); 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("decl",11, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decl_list ::= decl COMMA decl_list 
            {
              List<DeclarationIdentifier> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).right;
		DeclarationIdentifier d = (DeclarationIdentifier)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		List<DeclarationIdentifier> l = (List<DeclarationIdentifier>)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 l.add(0,d); RESULT = l; 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("decl_list",12, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decl_list ::= decl 
            {
              List<DeclarationIdentifier> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		DeclarationIdentifier d = (DeclarationIdentifier)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = new LinkedList<DeclarationIdentifier>(Arrays.asList(d)); 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("decl_list",12, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // field_decl ::= type decl_list SEMI_COLON 
            {
              FieldDeclaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		List<DeclarationIdentifier> l = (List<DeclarationIdentifier>)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		 RESULT = new FieldDeclaration(t,l); 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("field_decl",3, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // field_decl_list ::= 
            {
              List<FieldDeclaration> RESULT =null;
		 RESULT = new LinkedList<FieldDeclaration>();
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("field_decl_list",4, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // field_decl_list ::= field_decl_list field_decl 
            {
              List<FieldDeclaration> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		List<FieldDeclaration> l = (List<FieldDeclaration>)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		FieldDeclaration f = (FieldDeclaration)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 l.add(f); RESULT = l; 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("field_decl_list",4, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class_decl ::= CLASS ID L_BRACE field_decl_list R_BRACE 
            {
              ClassDeclaration RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-3)).value;
		int fdlleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int fdlright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		List<FieldDeclaration> fdl = (List<FieldDeclaration>)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		 RESULT = new ClassDeclaration(id,fdl,idleft+1,idright+1);
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("class_decl",2, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-4)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_decl ::= CLASS ID L_BRACE field_decl_list method_decl_list R_BRACE 
            {
              ClassDeclaration RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-4)).value;
		int fdlleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).left;
		int fdlright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).right;
		List<FieldDeclaration> fdl = (List<FieldDeclaration>)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-2)).value;
		int mdlleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int mdlright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		List<MethodDeclaration> mdl = (List<MethodDeclaration>)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		 RESULT = new ClassDeclaration(id,fdl,mdl,idleft+1,idright+1);
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("class_decl",2, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-5)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= class_decl program 
            {
              Program RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		ClassDeclaration cd = (ClassDeclaration)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		Program p = (Program)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 p.addClassDeclaration(cd); RESULT = p; 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)).value;
		RESULT = start_val;
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.elementAt(CUP$CTdsParser$top-1)), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CTdsParser$parser.done_parsing();
          return CUP$CTdsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= class_decl 
            {
              Program RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()).right;
		ClassDeclaration cd = (ClassDeclaration)((java_cup.runtime.Symbol) CUP$CTdsParser$stack.peek()).value;
		 RESULT = new Program(new LinkedList<ClassDeclaration>(Arrays.asList(cd))); 
              CUP$CTdsParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CTdsParser$stack.peek()), RESULT);
            }
          return CUP$CTdsParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

